from .objects import Serializable, Stats, Track, PlayerState, TrackException

from dataclasses import dataclass


class Event(Serializable):
    """
    Superclass for all events.

    "Lmao why are events serializable?"
    Why don't you mind your own business?

    (The actual answer is because a lot of these events
    are generated by Lavalink and the Serializable superclass
    allows an easy way to automagically generate some stuff.)
    """
    pass


@dataclass
class ReadyEvent(Event):
    resumed: bool
    session_id: str


@dataclass
class StatsEvent(Event):
    stats: Stats

    @classmethod
    def from_dict(cls, data):
        if 'stats' in data:
            return super().from_dict(data)
        data = {'stats': data}
        return super().from_dict(data)


@dataclass
class PlayerUpdateEvent(Event):
    guild_id: int
    state: PlayerState


@dataclass
class TrackStartEvent(Event):
    track: Track
    guild_id: int
    callback: str = "on_track_start"


@dataclass
class TrackEndEvent(Event):
    track: Track
    reason: str
    guild_id: int
    callback: str = "on_track_end"

    @property
    def may_start_next(self) -> bool:
        if self.reason in ['finished', 'loadFailed']:
            return True
        return False


@dataclass
class TrackExceptionEvent(Event):
    track: Track
    exception: TrackException
    guild_id: int
    callback: str = "on_track_exception"


@dataclass
class TrackStuckEvent(Event):
    track: Track
    threshold_ms: str
    guild_id: int


@dataclass
class WebSocketClosedEvent(Event):
    code: int
    reason: str
    by_remote: bool
    guild_id: int